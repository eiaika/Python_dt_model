# -*- coding: utf-8 -*-
"""Condensing boiler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1byIeQCw9XVq3n2mABAS6QwLOz-rN8DpA
"""


#from CoolProp.CoolProp import PhaseSI, PropsSI, get_global_param_string
from CoolProp.CoolProp import PropsSI
# import CoolProp.CoolProp as CoolProp
# from CoolProp.HumidAirProp import HAPropsSI

from scipy.interpolate import CubicSpline





CH4 = 88.8825
C2H6 = 5.0932
C3H8 = 1.3142
C4H10 = 0.386
C5H12 = 0.234
N2 = 1.6896
CO2 = 2.3921 + 0.00010000000001753051
O2 = 0.0083
CO = 0
H2 = 0
H2S = 0
d_g = 0.010
d_air = 0.013
alpha = 1.3
sum = (CH4 + C2H6 + C3H8 + C4H10 + C5H12 + N2 + CO2 + O2 + CO + H2 + H2S)
print (sum)

V_0 = 0.0476 * (0.5 * CO + 0.5 * H2 + 1.5 * H2S + (1 + 4 / 4) * CH4 + 
               (2 + 6 / 4) * C2H6 + (3 + 8 / 4) * C3H8 + (4 + 10 / 4) * C4H10 +
               (5 + 12 / 4) * C5H12 - O2)

V_0_N2 = 0.79 * V_0 + N2 / 100

V_RO2 = 0.01 * (CO2 + CO + H2S + 1 * CH4 + 2 * C2H6 + 3 * C3H8 + 4 * C4H10 + 5 * C5H12)

V_0_H2O = 0.01 * (H2S + H2 + 4 / 2 * CH4 + 6 / 2 * C2H6 + 8 / 2 * C3H8 + 10 / 2 * C4H10 + 
                  12 / 2 * C5H12 + 124 * d_g + 124 * d_air * V_0)

V_H2O = V_0_H2O + 0.01 * 124 * d_air * (alpha - 1) * V_0

V_dry_g = V_RO2  + V_0_N2 + (alpha - 1) * V_0

V_g = V_dry_g + V_H2O

r_RO2 = V_RO2 / V_g

r_H2O = V_H2O / V_g

r_0_N2 = V_0_N2 / V_g

r_0 = (alpha - 1) * V_0 / V_g

p_atm = 100000

#R_un = 8.314

p_H2O = r_H2O * p_atm

mu = 0.044 * r_RO2 + 0.018 * r_H2O + 0.024 * r_0_N2 + 0.028963 * (alpha - 1) * V_0 / V_g

T_s = PropsSI('T', "P", p_H2O, "Q", 0, 'H2O')


T_air_var = [20 + 273.15, 50 + 273.15, 80 + 273.15, 100 + 273.15,
     200 + 273.15, 300 + 273.15, 400 + 273.15, 500 + 273.15,
     600 + 273.15, 700 + 273.15, 800 + 273.15, 900 + 273.15,
     1000 + 273.15, 1100 + 273.15, 1200 + 273.15, 1300 + 273.15,
     1400 + 273.15, 1500 + 273.15, 1600 + 273.15, 1700 + 273.15]
cv_air_var = [26000, 65000, 104000, 133000, 267000, 404000, 543000, 686000,
     832000, 982000, 1134000, 1285000, 1440000, 1600000, 1760000, 1919000,
     2083000, 2247000, 2411000, 2574000]

cv_air = CubicSpline(T_air_var, cv_air_var, bc_type='natural')

def I (T):
    return V_RO2 * PropsSI('H', "P", p_atm, "T", T, 'CO2') * (44/22.4) + V_0_N2 * PropsSI('H', "P", p_atm, "T", T, 'N2') * (28/22.4) + V_H2O * PropsSI('H', "P", p_atm, "T", T, 'H2O') * (18/22.4) + (alpha - 1) * V_0 * cv_air (T)

def с (T):
    return V_RO2 * PropsSI('С', "P", p_atm, "T", T, 'CO2') * (44/22.4) + V_0_N2 * PropsSI('С', "P", p_atm, "T", T, 'N2') * (28/22.4) + V_H2O * PropsSI('С', "P", p_atm, "T", T, 'H2O') * (18/22.4) + (alpha - 1) * V_0 * cv_air (T) / (T - 273.15)


# Конструктивні характеристики
D_in = 0.225
D_out = 0.180
L = 3.1415926 * 4 * (D_in + D_out) / 2
delta = 0.001
a = (D_in - D_out) / 2 - 2 * delta
b = 0.007 - 0.001 - 0.2 * delta
s = a * b
D_g_t = 2 * (a + 2 * delta) + 2 * (b + 2 * delta)
D_t_w = 2 * a + 2 * b
A_g_t = 0.001 * (D_in - D_out) / 2
A_t_w = s
N = 1
delta_l = L / N
N_g_1_7 = 7
N_g_8_9 = 2
N_w_1_5 = 5
N_w_6_9 = 4

# Коефцієнти теплопередачі
k_tr_1_5 = 1000
k_tr_6_7 = 1000
k_tr_8_9 = 1000

c_w = 4180
# Температура продуктів згорання на вході у пучок
T_g_in = (1100 + 273.15)
# Вхідні сигнали
T_w_in_6_9 = (59 + 273.15)
T_w_out_1_5 = (70 + 273.15)
w_w = 0.961
V_ng_actual = 1.81974681e-03



import numpy as np
from scipy.optimize import fsolve

def myFunction(z):
   V_ng = z[0]
   T_g_out_1_5 = z[1]
   T_g_out_6_7 = z[2]
   T_g_out_8_9 = z[3]
   T_w_out_6_7 = z[4]
   T_w_out_8_9 = z[5]

   F = np.empty((6))
   F[0] = V_ng * (I (T_g_in) - I (T_g_out_1_5)) / N_g_1_7 - k_tr_1_5 * D_g_t * delta_l * (T_g_out_1_5 - T_w_out_1_5)
   F[1] = V_ng * (I (T_g_in) - I (T_g_out_6_7)) / N_g_1_7 - k_tr_6_7 * D_g_t * delta_l * (T_g_out_6_7 - T_w_out_6_7)
   F[2] = w_w * c_w / N_w_1_5 * (2 * T_w_out_6_7 / N_w_6_9 + 2 * T_w_out_8_9 / N_w_6_9 - T_w_out_1_5) + k_tr_1_5 * D_g_t * delta_l * (T_g_out_1_5 - T_w_out_1_5)
   F[3] = w_w * c_w / N_w_6_9 * (T_w_in_6_9 - T_w_out_6_7) + k_tr_6_7 * D_g_t * delta_l * (T_g_out_6_7 - T_w_out_6_7)
   F[4] = V_ng * ((5 * I (T_g_out_1_5) / N_g_1_7 + 2 * I (T_g_out_6_7) / N_g_1_7) - I (T_g_out_8_9)) / N_g_8_9 - k_tr_8_9 * D_g_t * delta_l * (T_g_out_8_9 - T_w_out_8_9) 
   F[5] = w_w * c_w / N_w_6_9 * (T_w_in_6_9 - T_w_out_8_9) + k_tr_8_9 * D_g_t * delta_l * (T_g_out_8_9 - T_w_out_8_9)
   return F

zGuess = np.array([0.001764, 388, 382, 368, 337, 335])
z = fsolve(myFunction,zGuess)
print(z)
V_ng = z[0]

etta_theor = w_w * c_w * (T_w_out_1_5 - T_w_in_6_9) / (36872000 * V_ng)

etta_actual = w_w * c_w * (T_w_out_1_5 - T_w_in_6_9) / (36872000 * V_ng_actual)

T = (700 + 273.15)



print (etta_theor)
print (etta_actual)